$packageInfo

import com.sun.javafx.scene.control.skin.SkinBase;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.geometry.VPos;
import javafx.scene.effect.BlurType;
import javafx.scene.effect.InnerShadow;
import javafx.scene.effect.DropShadow;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Control;
import javafx.scene.control.Skin;
import javafx.scene.paint.Color;
import javafx.scene.paint.CycleMethod;
import javafx.scene.paint.LinearGradient;
import javafx.scene.paint.Paint;
import javafx.scene.paint.RadialGradient;
import javafx.scene.paint.Stop;
import javafx.scene.shape.ClosePath;
import javafx.scene.shape.CubicCurveTo;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Ellipse;
import javafx.scene.shape.FillRule;
import javafx.scene.shape.Line;
import javafx.scene.shape.LineTo;
import javafx.scene.shape.MoveTo;
import javafx.scene.shape.Path;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.Shape;
import javafx.scene.shape.StrokeLineCap;
import javafx.scene.shape.StrokeLineJoin;
import javafx.scene.shape.StrokeType;
import javafx.scene.text.Font;
import javafx.scene.text.FontPosture;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.scene.transform.Affine;
import javafx.scene.transform.Rotate;
import javafx.scene.transform.Scale;


public class $classNameSkin extends SkinBase<$className, $classNameBehavior> {
    private $className control;
    private boolean      square;
    private boolean      keepAspect;
    private boolean      isDirty;
    private boolean      initialized;
$groupDeclaration

    // ******************** Constructors **************************************
    public $classNameSkin(final $className CONTROL) {
        super(CONTROL, new $classNameBehavior(CONTROL));
        control     = CONTROL;
        square      = control.isSquare();
        keepAspect  = control.isKeepAspect();
        initialized = false;
        isDirty     = false;
$groupInitialization
        init();
    }

    private void init() {
        if (control.getPrefWidth() < 0 | control.getPrefHeight() < 0) {
            control.setPrefSize($width, $height);
        }

$registerListeners
        registerChangeListener(control.prefWidthProperty(), "PREF_WIDTH");
        registerChangeListener(control.prefHeightProperty(), "PREF_HEIGHT");

        initialized = true;
        repaint();
    }


    // ******************** Methods *******************************************
    @Override protected void handleControlPropertyChanged(final String PROPERTY) {
        super.handleControlPropertyChanged(PROPERTY);
        if ("PREF_WIDTH".equals(PROPERTY)) {
            repaint();
        } else if ("PREF_HEIGHT".equals(PROPERTY)) {
            repaint();
        }$handlePropertyChanges
    }

    public final void repaint() {
        isDirty = true;
        requestLayout();
    }

    @Override public void layoutChildren() {
        if (!isDirty) {
            return;
        }
        if (!initialized) {
            init();
        }
        getChildren().clear();
$groupUpdate
        getChildren().addAll($layerList);
        isDirty = false;

        super.layoutChildren();
    }

    @Override public final $className getSkinnable() {
        return control;
    }

    @Override public final void dispose() {
        control = null;
    }

    @Override protected double computePrefWidth(final double PREF_WIDTH) {
        double prefWidth = $width;
        if (PREF_WIDTH != -1) {
            prefWidth = Math.max(0, PREF_WIDTH - getInsets().getLeft() - getInsets().getRight());
        }
        return super.computePrefWidth(prefWidth);
    }

    @Override protected double computePrefHeight(final double PREF_HEIGHT) {
        double prefHeight = $height;
        if (PREF_HEIGHT != -1) {
            prefHeight = Math.max(0, PREF_HEIGHT - getInsets().getTop() - getInsets().getBottom());
        }
        return super.computePrefHeight(prefHeight);
    }

	@Override protected double computeMinWidth(final double MIN_WIDTH) {
	    return super.computeMinWidth(Math.max($width, MIN_WIDTH - getInsets().getLeft() - getInsets().getRight()));
	}

	@Override protected double computeMinHeight(final double MIN_HEIGHT) {
	    return super.computeMinHeight(Math.max($height, MIN_HEIGHT - getInsets().getTop() - getInsets().getBottom()));
	}

	@Override protected double computeMaxWidth(final double MAX_WIDTH) {
	    return super.computeMaxWidth(Math.max($width, MAX_WIDTH - getInsets().getLeft() - getInsets().getRight()));
	}

	@Override protected double computeMaxHeight(final double MAX_HEIGHT) {
	    return super.computeMaxHeight(Math.max($height, MAX_HEIGHT - getInsets().getTop() - getInsets().getBottom()));
	}

    private final String createCssColor(final Color COLOR) {
        final StringBuilder CSS_COLOR = new StringBuilder(19);
        CSS_COLOR.append("rgba(");
        CSS_COLOR.append((int) (COLOR.getRed() * 255));
        CSS_COLOR.append(", ");
        CSS_COLOR.append((int) (COLOR.getGreen() * 255));
        CSS_COLOR.append(", ");
        CSS_COLOR.append((int) (COLOR.getBlue() * 255));
        CSS_COLOR.append(", ");
        CSS_COLOR.append(COLOR.getOpacity());
        CSS_COLOR.append(");");
        return CSS_COLOR.toString();
    }


    // ******************** Drawing related ***********************************    $drawingCode
}
